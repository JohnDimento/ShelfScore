<div id="google-books-modal" class="hidden fixed inset-0 bg-gray-600 bg-opacity-50 overflow-y-auto h-full w-full">
  <div class="relative top-20 mx-auto p-5 border w-full max-w-2xl shadow-lg rounded-md bg-white">
    <div class="flex flex-col space-y-4">
      <!-- Header -->
      <div class="flex justify-between items-center pb-3">
        <h3 class="text-xl font-semibold text-gray-900">Search Google Books</h3>
        <button onclick="document.getElementById('google-books-modal').classList.add('hidden')" class="text-gray-400 hover:text-gray-500">
          <svg class="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12" />
          </svg>
        </button>
      </div>

      <!-- Search Input -->
      <div class="flex space-x-2">
        <input
          type="text"
          id="google-books-search"
          class="flex-1 px-4 py-2 border rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
          placeholder="Search for books..."
          onkeyup="if(event.key === 'Enter') searchGoogleBooks()"
        >
        <button
          onclick="searchGoogleBooks()"
          class="px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-offset-2"
        >
          Search
        </button>
      </div>

      <!-- Results -->
      <div id="google-books-results" class="space-y-4 max-h-96 overflow-y-auto">
        <!-- Results will be inserted here -->
      </div>

      <!-- Loading State -->
      <div id="google-books-loading" class="hidden">
        <div class="flex justify-center items-center py-4">
          <div class="animate-spin rounded-full h-8 w-8 border-b-2 border-blue-600"></div>
        </div>
      </div>

      <!-- Success Message -->
      <div id="google-books-success" class="hidden">
        <div class="bg-green-50 border border-green-200 rounded-lg p-4">
          <p class="text-green-800 text-center"></p>
          <div class="mt-4 flex justify-center">
            <button
              id="generate-quiz-btn"
              class="px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-offset-2"
            >
              Generate Quiz
            </button>
          </div>
        </div>
      </div>

      <!-- Error Message -->
      <div id="google-books-error" class="hidden">
        <div class="bg-red-50 border border-red-200 rounded-lg p-4">
          <p class="text-red-600 text-center"></p>
        </div>
      </div>
    </div>
  </div>
</div>

<script>
let importedBookId = null;

async function searchGoogleBooks() {
  const searchInput = document.getElementById('google-books-search');
  const resultsDiv = document.getElementById('google-books-results');
  const loadingDiv = document.getElementById('google-books-loading');
  const errorDiv = document.getElementById('google-books-error');
  const successDiv = document.getElementById('google-books-success');

  if (!searchInput.value) return;

  // Show loading, hide results and messages
  loadingDiv.classList.remove('hidden');
  resultsDiv.innerHTML = '';
  errorDiv.classList.add('hidden');
  successDiv.classList.add('hidden');

  try {
    const response = await fetch(`/books/google_search?query=${encodeURIComponent(searchInput.value)}`);
    const data = await response.json();

    if (response.ok) {
      // Clear previous results
      resultsDiv.innerHTML = '';

      // Add new results
      data.books.forEach(book => {
        const bookDiv = document.createElement('div');
        bookDiv.className = 'flex space-x-4 p-4 border rounded-lg';
        bookDiv.innerHTML = `
          <img src="${book.thumbnail || '/default-book-cover.jpg'}" class="w-24 h-32 object-cover rounded" alt="${book.title}">
          <div class="flex-1">
            <h4 class="font-semibold text-lg">${book.title}</h4>
            <p class="text-gray-600">${book.author}</p>
            <p class="text-sm text-gray-500 line-clamp-2 mt-1">${book.description || ''}</p>
            <button
              onclick="importBookAndGenerateQuiz('${book.id}')"
              class="mt-2 px-3 py-1 bg-green-600 text-white text-sm rounded hover:bg-green-700 focus:outline-none focus:ring-2 focus:ring-green-500 focus:ring-offset-2"
            >
              Import & Start Quiz
            </button>
          </div>
        `;
        resultsDiv.appendChild(bookDiv);
      });
    } else {
      errorDiv.classList.remove('hidden');
      errorDiv.querySelector('p').textContent = data.error || 'Failed to search books';
    }
  } catch (error) {
    errorDiv.classList.remove('hidden');
    errorDiv.querySelector('p').textContent = 'Failed to connect to the server';
  } finally {
    loadingDiv.classList.add('hidden');
  }
}

async function importBookAndGenerateQuiz(googleBooksId) {
  const errorDiv = document.getElementById('google-books-error');
  const successDiv = document.getElementById('google-books-success');
  const loadingDiv = document.getElementById('google-books-loading');

  loadingDiv.classList.remove('hidden');
  errorDiv.classList.add('hidden');
  successDiv.classList.add('hidden');

  try {
    // First, import the book
    const importResponse = await fetch('/books/import_from_google', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        'X-CSRF-Token': document.querySelector('meta[name="csrf-token"]').content
      },
      body: JSON.stringify({ google_books_id: googleBooksId })
    });

    const importData = await importResponse.json();

    if (!importResponse.ok && importResponse.status !== 206) {
      throw new Error(importData.error || 'Failed to import book');
    }

    // Then, generate the quiz
    const quizResponse = await fetch(`/books/${importData.book.id}/take_quiz`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        'X-CSRF-Token': document.querySelector('meta[name="csrf-token"]').content,
        'Accept': 'application/json'
      },
      credentials: 'same-origin'
    });

    if (!quizResponse.ok) {
      if (quizResponse.status === 401) {
        window.location.href = '/users/sign_in';
        return;
      }
      throw new Error(`Failed to generate quiz: ${quizResponse.status}`);
    }

    const quizData = await quizResponse.json();

    // Show brief success message before redirecting
    successDiv.classList.remove('hidden');
    successDiv.querySelector('p').textContent = 'Book imported! Taking you to your quiz...';

    // Redirect to the quiz
    setTimeout(() => {
      window.location.href = `/quiz_attempts/${quizData.quiz_attempt_id}`;
    }, 500);

  } catch (error) {
    errorDiv.classList.remove('hidden');
    errorDiv.querySelector('p').textContent = error.message || 'Failed to process your request';
  } finally {
    loadingDiv.classList.add('hidden');
  }
}
</script>
